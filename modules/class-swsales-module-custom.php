<?php

namespace Sitewide_Sales\modules;

use Sitewide_Sales\classes;

defined( 'ABSPATH' ) || die( 'File cannot be accessed directly' );

class SWSales_Module_Custom {

	/**
	 * Initial plugin setup
	 *
	 * @package sitewide-sale/modules
	 */
	public static function init() {
		// Register sale type.
		add_filter( 'swsales_sale_types', array( __CLASS__, 'register_sale_type' ) );

		// Add fields to Edit Sitewide Sale page.
		add_action( 'swsales_after_choose_sale_type', array( __CLASS__, 'swsales_after_choose_sale_type' ) );

		// Enable saving of fields added above.
		add_action( 'swsales_save_metaboxes', array( __CLASS__, 'swsales_save_metaboxes' ), 10, 2 );

		// Enqueue JS for Edit Sitewide Sale page.
		add_action( 'admin_enqueue_scripts', array( __CLASS__, 'admin_enqueue_scripts' ) );

		// For the swsales_coupon helper function.
		add_filter( 'swsales_coupon', array( __CLASS__, 'swsales_coupon' ), 10, 2 );
	
		// Track conversions.
		add_action( 'wp', array( __CLASS__, 'track_conversions' ) );
	
		// Filter reports.
		add_filter( 'swsales_get_checkout_conversions', array( __CLASS__, 'checkout_conversions' ), 10, 2 );
		add_filter( 'swsales_get_revenue', array( __CLASS__, 'sale_revenue' ), 10, 2 );
	} // end init()

	/**
	 * Register custom module with SWSales
	 *
	 * @param  array $sale_types that are registered in SWSales.
	 * @return array
	 */
	public static function register_sale_type( $sale_types ) {
		$sale_types['custom'] = 'Custom';
		return $sale_types;
	} // end register_sale_type()

	/**
	 * Adds text field to enter coupon.
	 *
	 * @param SWSales_Sitewide_Sale $cur_sale that is being edited.
	 */
	public static function swsales_after_choose_sale_type( $cur_sale ) {
		?>
		<tr class='swsales-module-row swsales-module-row-custom'>
			<?php
			$current_coupon = $cur_sale->get_meta_value( 'swsales_custom_coupon', '' );
			?>
			<th><label for="swsales_custom_coupon"><?php esc_html_e( 'Coupon', 'sitewide-sales' ); ?></label></th>
			<td>
				<input type="text" class="swsales_option" id="swsales_custom_coupon" name="swsales_custom_coupon" value='<?php esc_html_e( $current_coupon ); ?>'>
				<p class="description"><?php esc_html_e( "If you would like a coupon associated with your sale, you can set it up in whatever eCommerce platform you are using and enter the code here.", 'sitewide-sales' ) ?></p>
			</td>
		</tr>
		<tr class='swsales-module-row swsales-module-row-custom'>
			<?php
			$confirmation_url = $cur_sale->get_meta_value( 'swsales_custom_confirmation_url', '' );
			?>
			<th><label for="swsales_custom_confirmation_url"><?php esc_html_e( 'Confirmation Page URL', 'sitewide-sales' ); ?></label></th>
			<td>
				<input type="text" class="swsales_option" id="swsales_custom_confirmation_url" name="swsales_custom_confirmation_url" value='<?php esc_html_e( $confirmation_url ); ?>'>
				<p class="description"><?php esc_html_e( "If you would like to track checkout conversions, enter the URL that your users are sent to after completing checkout.", 'sitewide-sales' ) ?></p>
			</td>
		</tr>
		<tr class='swsales-module-row swsales-module-row-custom'>
			<?php
			$average_order_value = number_format( floatval( $cur_sale->get_meta_value( 'swsales_custom_average_order_value', 0 ) ), 2 );
			?>
			<th><label for="swsales_custom_average_order_value"><?php esc_html_e( 'Average Order Value', 'sitewide-sales' ); ?></label></th>
			<td>
				<input type="number" class="swsales_option" id="swsales_custom_average_order_value" name="swsales_custom_average_order_value" step=0.01 value='<?php esc_html_e( $average_order_value ); ?>'>
				<p class="description"><?php esc_html_e( "If you would like to estimate the revenue generated by your sale, enter the average sale price of each order.", 'sitewide-sales' ) ?></p>
			</td>
		</tr>
		<?php
	} // end swsales_after_choose_sale_type()

	/**
	 * Saves custom module fields when saving Sitewide Sale.
	 *
	 * @param int     $post_id of the sitewide sale being edited.
	 * @param WP_Post $post object of the sitewide sale being edited.
	 */
	public static function swsales_save_metaboxes( $post_id, $post ) {
		if ( isset( $_POST['swsales_custom_coupon'] ) ) {
			update_post_meta( $post_id, 'swsales_custom_coupon', $_POST['swsales_custom_coupon'] );
		}
		if ( isset( $_POST['swsales_custom_confirmation_url'] ) ) {
			update_post_meta( $post_id, 'swsales_custom_confirmation_url', $_POST['swsales_custom_confirmation_url'] );
		}
		if ( isset( $_POST['swsales_custom_average_order_value'] ) ) {
			update_post_meta( $post_id, 'swsales_custom_average_order_value', $_POST['swsales_custom_average_order_value'] );
		}
	} // end swsales_save_metaboxes()

	/**
	 * Enqueues /modules/js/swsales-module-custom-metaboxes.js
	 */
	public static function admin_enqueue_scripts() {
		global $wpdb, $typenow;
		if ( 'sitewide_sale' === $typenow ) {
			wp_register_script( 'swsales_module_custom_metaboxes', plugins_url( 'modules/js/swsales-module-custom-metaboxes.js', SWSALES_BASENAME ), array( 'jquery' ), '1.0.4' );
			wp_enqueue_script( 'swsales_module_custom_metaboxes' );
		}
	} // end admin_enqueue_scripts()

	/**
	 * Get the coupon for a sitewide sale.
	 * Callback for the swsales_coupon filter.
	 */
	public static function swsales_coupon( $coupon, $sitewide_sale ) {
		global $wpdb;
		if ( $sitewide_sale->get_sale_type() === 'custom' ) {
			$coupon = $sitewide_sale->get_meta_value( 'swsales_custom_coupon', '' );
		}
		return $coupon;
	} // end swsales_coupon()

	public static function track_conversions() {
		$sitewide_sale = \Sitewide_Sales\classes\SWSales_Sitewide_Sale::get_active_sitewide_sale();
		if ( empty( $sitewide_sale ) || 'custom' !== $sitewide_sale->get_sale_type() ) {
			return;
		}

		$cookie_name = 'swsale_custom_conversions_' . $sitewide_sale->get_id();
		if ( get_permalink() === $sitewide_sale->get_meta_value( 'swsales_custom_confirmation_url', '' ) && empty( $_COOKIE[ $cookie_name ] ) ) {
			setcookie( $cookie_name, '1', time()+60*60*24*30, COOKIEPATH, COOKIE_DOMAIN, false);
			$prev_conversions = intval( $sitewide_sale->get_meta_value( 'swsales_custom_conversions', 0 ) );
			update_post_meta( $sitewide_sale->get_id(), 'swsales_custom_conversions', $prev_conversions + 1 );
		}
	}

	/**
	 * Set custom module checkout conversions for Sitewide Sale report.
	 *
	 * @param string               $cur_conversions set by filter.
	 * @param SWSales_Sitewide_Sale $sitewide_sale to generate report for.
	 * @return string
	 */
	public static function checkout_conversions( $cur_conversions, $sitewide_sale ) {
		if ( 'custom' !== $sitewide_sale->get_sale_type() ) {
			return $cur_conversions;
		}
		return $sitewide_sale->get_meta_value( 'swsales_custom_conversions', 'N/A' );
	}

	/**
	 * Set PMPro module total revenue for Sitewide Sale report.
	 *
	 * @param string               $cur_revenue set by filter.
	 * @param SWSales_Sitewide_Sale $sitewide_sale to generate report for.
	 * @param bool                 $format_price whether to run output through pmpro_formatPrice().
	 * @return string
	 */
	public static function sale_revenue( $cur_revenue, $sitewide_sale, $format_price = true ) {
		if ( 'custom' !== $sitewide_sale->get_sale_type() ) {
			return $cur_revenue;
		}
		$checkout_conversions = intval( $sitewide_sale->get_meta_value( 'swsales_custom_conversions', 0 ) );
		$average_order_value = floatval( $sitewide_sale->get_meta_value( 'swsales_custom_average_order_value', 0 ) );
		return $checkout_conversions * $average_order_value ? number_format( $checkout_conversions * $average_order_value, 2 ) : 'N/A';
	}
}
SWSales_Module_Custom::init();
